void13
======

void13 based on void11
./void11_penetration wlan0 -t 1 -S peznet -s MAC-of-Victim
station == stapr == MAC-of-Victim
optarg = SSID own_addr = SSID's MAC\
replace ssid to ssid.ssid
replace sock&ioctlsock to ctrl_sock
delete duplicate funcions at void11.c (copy driver.c)
#include "common/ieee802_11_defs.h" for soma macros
debug: if (show_errors) {
				wpa_printf(MSG_DEBUG, "IEEE 802.11 element "
					   "parse failed (id=%d elen=%d "
					   "left=%lu)",
					   id, elen, (unsigned long) left);
				wpa_hexdump(MSG_MSGDUMP, "IEs", start, len);
			}
		replaces 
		HOSTAPD_DEBUG(HOSTAPD_DEBUG_MINIMAL,
				      "IEEE 802.11 element parse failed "
				      "(id=%d elen=%d left=%d)\n",
				      id, elen, left);	
		which equals
		do { \
	if (hapd->conf->debug >= (HOSTAPD_DEBUG_MINIMAL)) \
		printf("IEEE 802.11 element parse failed "
				      "(id=%d elen=%d left=%d)\n",
				      id, elen, left); \
} while (0)		      

void11::
void11.c: 
int void11_deauth_all_stas(hostapd *void11, u8 *station, u8 *bssid) {
***
// void11 (hostapd/hostapd_data) here: sock, conf -> debug
	if(send(void11->sock, &mgmt, IEEE80211_HDRLEN + sizeof(mgmt.u.deauth),
		0) < 0) {
		if(void11->conf->debug > HOSTAPD_DEBUG_MINIMAL)
			perror("void11_deauth_all_stas: send");
		return(-1);
	}
}

void11: hostapd *void11


hostapd:
hapd: hostapd *hapd
hostapd: hostapd_data
config.h/c = ap_config.h

